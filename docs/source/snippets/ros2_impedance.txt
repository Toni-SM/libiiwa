[start-command-line-set_joint_stiffness-1]

$ ros2 service call /iiwa/set_joint_stiffness libiiwa_msgs/srv/SetArray "{data: [400.0, 350.0, 300.0, 250.0, 200.0, 150.0, 100.0]}"

[end-command-line-set_joint_stiffness-1]


[start-command-line-set_joint_damping-1]

$ ros2 service call /iiwa/set_joint_damping libiiwa_msgs/srv/SetArray "{data: [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]}"

[end-command-line-set_joint_damping-1]


[start-command-line-set_cartesian_stiffness-1]

$ ros2 service call /iiwa/set_cartesian_stiffness libiiwa_msgs/srv/SetXYZABCParam "{x: 2000.0, y: 3000.0, z: 4000.0, a: 50.0, b: 100.0, c: 150.0, float_param: 100.0}"

[end-command-line-set_cartesian_stiffness-1]


[start-command-line-set_cartesian_damping-1]

$ ros2 service call /iiwa/set_cartesian_damping libiiwa_msgs/srv/SetXYZABCParam "{x: 0.2, y: 0.3, z: 0.4, a: 0.5, b: 0.6, c: 0.7, float_param: 0.5}"

[end-command-line-set_cartesian_damping-1]


[start-command-line-set_cartesian_additional_control_force-1]

$ ros2 service call /iiwa/set_cartesian_additional_control_force libiiwa_msgs/srv/SetXYZABC "{x: -10.0, y: -20.0, z: -30.0, a: 10.0, b: 20.0, c: 30.0}"

[end-command-line-set_cartesian_additional_control_force-1]


[start-command-line-set_cartesian_max_control_force-1]

$ ros2 service call /iiwa/set_cartesian_max_control_force libiiwa_msgs/srv/SetXYZABCParam "{x: 10.0, y: 20.0, z: 30.0, a: 10.0, b: 20.0, c: 30.0, boolean_param: true}"

[end-command-line-set_cartesian_max_control_force-1]


[start-command-line-set_cartesian_max_velocity-1]

# abort the motion for a maximum Cartesian velocity of 10  m/s in the z-axis
$ ros2 service call /iiwa/set_cartesian_max_velocity libiiwa_msgs/srv/SetXYZABC "{x: 1e6, y: 1e6, z: 10.0, a: 1e6, b: 1e6, c: 1e6}"

[end-command-line-set_cartesian_max_velocity-1]


[start-command-line-set_cartesian_max_path_deviation-1]

# abort the motion for a maximum Cartesian path deviation of 0.1 m in the y-axis
$ ros2 service call /iiwa/set_cartesian_max_path_deviation libiiwa_msgs/srv/SetXYZABC "{x: 1e6, y: 0.1, z: 1e6, a: 1e6, b: 1e6, c: 1e6}"

[end-command-line-set_cartesian_max_path_deviation-1]




[start-python-set_joint_stiffness-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetArray, '/iiwa/set_joint_stiffness')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetArray.Request()
request.data = [400.0, 350.0, 300.0, 250.0, 200.0, 150.0, 100.0]
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_joint_stiffness-1]


[start-python-set_joint_damping-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetArray, '/iiwa/set_joint_damping')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetArray.Request()
request.data = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_joint_damping-1]


[start-python-set_cartesian_stiffness-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetXYZABCParam, '/iiwa/set_cartesian_stiffness')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetXYZABCParam.Request()
request.x = 2000.0
request.y = 3000.0
request.z = 4000.0
request.a = 50.0
request.b = 100.0
request.c = 150.0
request.float_param = 100.0
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_cartesian_stiffness-1]


[start-python-set_cartesian_damping-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetXYZABCParam, '/iiwa/set_cartesian_damping')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetXYZABCParam.Request()
request.x = 0.2
request.y = 0.3
request.z = 0.4
request.a = 0.5
request.b = 0.6
request.c = 0.7
request.float_param = 0.5
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_cartesian_damping-1]


[start-python-set_cartesian_additional_control_force-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetXYZABC, '/iiwa/set_cartesian_additional_control_force')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetXYZABC.Request()
request.x = -10.0
request.y = -20.0
request.z = -30.0
request.a = 10.0
request.b = 20.0
request.c = 30.0
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_cartesian_additional_control_force-1]


[start-python-set_cartesian_max_control_force-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetXYZABCParam, '/iiwa/set_cartesian_max_control_force')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetXYZABCParam.Request()
request.x = 10.0
request.y = 20.0
request.z = 30.0
request.a = 10.0
request.b = 20.0
request.c = 30.0
request.boolean_param = True
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_cartesian_max_control_force-1]


[start-python-set_cartesian_max_velocity-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetXYZABC, '/iiwa/set_cartesian_max_velocity')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetXYZABC.Request()
request.x = 1e6
request.y = 1e6
request.z = 10.0
request.a = 1e6
request.b = 1e6
request.c = 1e6
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_cartesian_max_velocity-1]


[start-python-set_cartesian_max_path_deviation-1]

import rclpy
from rclpy.node import Node

import libiiwa_msgs.srv

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(libiiwa_msgs.srv.SetXYZABC, '/iiwa/set_cartesian_max_path_deviation')

# wait for service
client.wait_for_service()

# call service
request = libiiwa_msgs.srv.SetXYZABC.Request()
request.x = 1e6
request.y = 0.1
request.z = 1e6
request.a = 1e6
request.b = 1e6
request.c = 1e6
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_cartesian_max_path_deviation-1]