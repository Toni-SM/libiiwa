
[start-command-line-set_control_mode-1]

$ ros2 service call /iiwa/set_control_mode libiiwa_msgs/srv/SetString "{data: 'POSITION'}"
# or
$ ros2 service call /iiwa/set_control_mode libiiwa_msgs/srv/SetString "{data: 'position'}"

[end-command-line-set_control_mode-1]


[start-python-set_control_mode-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetString

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetString, '/iiwa/set_control_mode')

# wait for service
client.wait_for_service()

# call service
request = SetString.Request()
request.data = "POSITION"  # or "position"
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_control_mode-1]


[start-command-line-set_motion_type-1]

$ ros2 service call /iiwa/set_motion_type libiiwa_msgs/srv/SetString "{data: 'LIN'}"
# or
$ ros2 service call /iiwa/set_motion_type libiiwa_msgs/srv/SetString "{data: 'lin'}"

[end-command-line-set_motion_type-1]


[start-python-set_motion_type-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetString

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetString, '/iiwa/set_motion_type')

# wait for service
client.wait_for_service()

# call service
request = SetString.Request()
request.data = "LIN"  # or "lin"
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_motion_type-1]


[start-command-line-set_control_interface-1]

$ ros2 service call /iiwa/set_control_interface libiiwa_msgs/srv/SetString "{data: 'STANDARD'}"
# or
$ ros2 service call /iiwa/set_control_interface libiiwa_msgs/srv/SetString "{data: 'standard'}"

[end-command-line-set_control_interface-1]


[start-python-set_control_interface-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetString

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetString, '/iiwa/set_control_interface')

# wait for service
client.wait_for_service()

# call service
request = SetString.Request()
request.data = "STANDARD"  # or "standard"
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_control_interface-1]


[start-command-line-set_execution_type-1]

$ ros2 service call /iiwa/set_execution_type libiiwa_msgs/srv/SetString "{data: 'ASYNCHRONOUS'}"
# or
$ ros2 service call /iiwa/set_execution_type libiiwa_msgs/srv/SetString "{data: 'asynchronous'}"

[end-command-line-set_execution_type-1]


[start-python-set_execution_type-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetString

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetString, '/iiwa/set_execution_type')

# wait for service
client.wait_for_service()

# call service
request = SetString.Request()
request.data = "ASYNCHRONOUS"  # or "asynchronous"
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-set_execution_type-1]
