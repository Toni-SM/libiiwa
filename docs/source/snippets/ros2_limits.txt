
[start-command-line-desired_joint_velocity_rel-1]

$ ros2 service call /iiwa/set_desired_joint_velocity_rel libiiwa_msgs/srv/SetNumber "{data: 0.5}"

[end-command-line-desired_joint_velocity_rel-1]


[start-python-desired_joint_velocity_rel-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetNumber

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetNumber, '/iiwa/set_desired_joint_velocity_rel')

# wait for service
client.wait_for_service()

# call service
request = SetNumber.Request()
request.data = 0.5
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-desired_joint_velocity_rel-1]


[start-command-line-desired_joint_acceleration_rel-1]

$ ros2 service call /iiwa/set_desired_joint_acceleration_rel libiiwa_msgs/srv/SetNumber "{data: 0.5}"

[end-command-line-desired_joint_acceleration_rel-1]


[start-python-desired_joint_acceleration_rel-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetNumber

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetNumber, '/iiwa/set_desired_joint_acceleration_rel')

# wait for service
client.wait_for_service()

# call service
request = SetNumber.Request()
request.data = 0.5
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-desired_joint_acceleration_rel-1]


[start-command-line-desired_joint_jerk_rel-1]

$ ros2 service call /iiwa/set_desired_joint_jerk_rel libiiwa_msgs/srv/SetNumber "{data: 0.5}"

[end-command-line-desired_joint_jerk_rel-1]


[start-python-desired_joint_jerk_rel-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetNumber

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetNumber, '/iiwa/set_desired_joint_jerk_rel')

# wait for service
client.wait_for_service()

# call service
request = SetNumber.Request()
request.data = 0.5
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-desired_joint_jerk_rel-1]


[start-command-line-desired_cartesian_velocity-1]

$ ros2 service call /iiwa/set_desired_cartesian_velocity libiiwa_msgs/srv/SetNumber "{data: 0.25}"

[end-command-line-desired_cartesian_velocity-1]


[start-python-desired_cartesian_velocity-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetNumber

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetNumber, '/iiwa/set_desired_cartesian_velocity')

# wait for service
client.wait_for_service()

# call service
request = SetNumber.Request()
request.data = 0.25
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-desired_cartesian_velocity-1]


[start-command-line-desired_cartesian_acceleration-1]

$ ros2 service call /iiwa/set_desired_cartesian_acceleration libiiwa_msgs/srv/SetNumber "{data: 0.25}"

[end-command-line-desired_cartesian_acceleration-1]


[start-python-desired_cartesian_acceleration-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetNumber

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetNumber, '/iiwa/set_desired_cartesian_acceleration')

# wait for service
client.wait_for_service()

# call service
request = SetNumber.Request()
request.data = 0.25
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-desired_cartesian_acceleration-1]


[start-command-line-desired_cartesian_jerk-1]

$ ros2 service call /iiwa/set_desired_cartesian_jerk libiiwa_msgs/srv/SetNumber "{data: 0.25}"

[end-command-line-desired_cartesian_jerk-1]


[start-python-desired_cartesian_jerk-1]

import rclpy
from rclpy.node import Node

from libiiwa_msgs.srv import SetNumber

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a client for calling the service
client = node.create_client(SetNumber, '/iiwa/set_desired_cartesian_jerk')

# wait for service
client.wait_for_service()

# call service
request = SetNumber.Request()
request.data = 0.25
future = client.call_async(request)
rclpy.spin_until_future_complete(node, future)
response = future.result()

print("success:", response.success)
print("message:", response.message)

# shutdown the node
node.destroy_node()
rclpy.shutdown()

[end-python-desired_cartesian_jerk-1]
