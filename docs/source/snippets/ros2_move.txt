[start-command-line-joint-1]

# name are specified
$ ros2 topic pub -1 /iiwa/command/joint sensor_msgs/msg/JointState "{name: ['iiwa_joint_1', 'iiwa_joint_2', 'iiwa_joint_3', 'iiwa_joint_4', 'iiwa_joint_5', 'iiwa_joint_6', 'iiwa_joint_7'], position: [0.0, 0.0, 0.0, -1.57, 0.0, 1.57, 0.0]}"

# no need to specify message name if all joint positions are specified
$ ros2 topic pub -1 /iiwa/command/joint sensor_msgs/msg/JointState "{position: [0.0, 0.0, 0.0, -1.57, 0.0, 1.57, 0.0]}"

[end-command-line-joint-1]


[start-command-line-joint-2]

# all names and positions are specified
$ ros2 topic pub -1 /iiwa/command/joint sensor_msgs/msg/JointState "{name: ['iiwa_joint_1', 'iiwa_joint_2', 'iiwa_joint_3', 'iiwa_joint_4', 'iiwa_joint_5', 'iiwa_joint_6', 'iiwa_joint_7'], position: [.nan, .nan, .nan, -1.57, .nan, 1.57, .nan]}"

# all positions are specified
$ ros2 topic pub -1 /iiwa/command/joint sensor_msgs/msg/JointState "{position: [.nan, .nan, .nan, -1.57, .nan, 1.57, .nan]}"

# only target joint names and positions are specified
$ ros2 topic pub -1 /iiwa/command/joint sensor_msgs/msg/JointState "{name: ['iiwa_joint_4', 'iiwa_joint_6'], position: [-1.57, 1.57]}"

[end-command-line-joint-2]


[start-python-joint-1]

import rclpy
import sensor_msgs.msg
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a publisher
pub = node.create_publisher(
    sensor_msgs.msg.JointState, '/iiwa/command/joint', QoSPresetProfiles.SYSTEM_DEFAULT.value)

# build a message
msg = sensor_msgs.msg.JointState()
msg.position = [0.0, 0.0, 0.0, -1.57, 0.0, 1.57, 0.0]
# or
msg = sensor_msgs.msg.JointState()
msg.name = ['iiwa_joint_1', 'iiwa_joint_2', 'iiwa_joint_3',
            'iiwa_joint_4', 'iiwa_joint_5', 'iiwa_joint_6', 'iiwa_joint_7']
msg.position = [0.0, 0.0, 0.0, -1.57, 0.0, 1.57, 0.0]

# publish the message
pub.publish(msg)

try:
    rclpy.spin_once(node)
except KeyboardInterrupt:
    pass
finally:
    # shutdown the node
    node.destroy_node()
    rclpy.shutdown()

[end-python-joint-1]


[start-python-joint-2]

import math
import rclpy
import sensor_msgs.msg
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a publisher
pub = node.create_publisher(
    sensor_msgs.msg.JointState, '/iiwa/command/joint', QoSPresetProfiles.SYSTEM_DEFAULT.value)

# build a message
# math.nan, float("nan"), np.nan and np.NaN are all equivalent
msg = sensor_msgs.msg.JointState()
msg.position = [math.nan, math.nan, math.nan, -1.57, math.nan, 1.57, math.nan]
# or
msg = sensor_msgs.msg.JointState()
msg.name = ['iiwa_joint_4', 'iiwa_joint_6']
msg.position = [-1.57, 1.57]

# publish the message
pub.publish(msg)

try:
    rclpy.spin_once(node)
except KeyboardInterrupt:
    pass
finally:
    # shutdown the node
    node.destroy_node()
    rclpy.shutdown()

[end-python-joint-2]


[start-command-line-cartesian-1]

$ ros2 topic pub -1 /iiwa/command/cartesian geometry_msgs/msg/Pose "{position: {x: 0.65, y: 0.0, z: 0.2}, orientation: {x: 0.0, y: 1.0, z: 0.0, w: 0.0}}" 

[end-command-line-cartesian-1]


[start-command-line-cartesian-2]

# case 1
$ ros2 topic pub -1 /iiwa/command/cartesian geometry_msgs/msg/Pose "{position: {x: 0.65, y: 0.0, z: 0.3}, orientation: {x: .nan, y: .nan, z: .nan, w: .nan}}" 

# case 2
$ ros2 topic pub -1 /iiwa/command/cartesian geometry_msgs/msg/Pose "{position: {x: .nan, y: .nan, z: 0.4}, orientation: {x: .nan, y: .nan, z: .nan, w: .nan}}"

# case 3
$ ros2 topic pub -1 /iiwa/command/cartesian geometry_msgs/msg/Pose "{position: {x: .nan, y: .nan, z: .nan}, orientation: {x: 0.0, y: -0.7071, z: 0.7071, w: 0.0}}"

[end-command-line-cartesian-2]


[start-python-cartesian-1]

import rclpy
import geometry_msgs.msg
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a publisher
pub = node.create_publisher(
    geometry_msgs.msg.Pose, '/iiwa/command/cartesian', QoSPresetProfiles.SYSTEM_DEFAULT.value)

# build a message
msg = geometry_msgs.msg.Pose()
msg.position.x = 0.65
msg.position.y = 0.0
msg.position.z = 0.2
msg.orientation.x = 0.0
msg.orientation.y = 1.0
msg.orientation.z = 0.0
msg.orientation.w = 0.0

# publish the message
pub.publish(msg)

try:
    rclpy.spin_once(node)
except KeyboardInterrupt:
    pass
finally:
    # shutdown the node
    node.destroy_node()
    rclpy.shutdown()

[end-python-cartesian-1]


[start-python-cartesian-2]

import math
import rclpy
import geometry_msgs.msg
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles

# initialize the ROS node
rclpy.init()
node = Node('test')

# create a publisher
pub = node.create_publisher(
    geometry_msgs.msg.Pose, '/iiwa/command/cartesian', QoSPresetProfiles.SYSTEM_DEFAULT.value)

# build a message 
# math.nan, float("nan"), np.nan and np.NaN are all equivalent

# case 1
msg = geometry_msgs.msg.Pose()
msg.position.x = 0.65
msg.position.y = 0.0
msg.position.z = 0.3
msg.orientation.x = math.nan
msg.orientation.y = math.nan
msg.orientation.z = math.nan
msg.orientation.w = math.nan

# case 2
msg = geometry_msgs.msg.Pose()
msg.position.x = math.nan
msg.position.y = math.nan
msg.position.z = 0.4
msg.orientation.x = math.nan
msg.orientation.y = math.nan
msg.orientation.z = math.nan
msg.orientation.w = math.nan

# case 3
msg = geometry_msgs.msg.Pose()
msg.position.x = math.nan
msg.position.y = math.nan
msg.position.z = math.nan
msg.orientation.x = 0.0
msg.orientation.y = -0.7071
msg.orientation.z = 0.7071
msg.orientation.w = 0.0

# publish the message
pub.publish(msg)

try:
    rclpy.spin_once(node)
except KeyboardInterrupt:
    pass
finally:
    # shutdown the node
    node.destroy_node()
    rclpy.shutdown()

[end-python-cartesian-2]
